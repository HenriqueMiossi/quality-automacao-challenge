{
	"info": {
		"_postman_id": "468a497a-aa28-4f4a-be50-0323bb7498a7",
		"name": "Quality Automação Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32056495"
	},
	"item": [
		{
			"name": "Register / Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Quality\",\r\n    \"password\": \"secret\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					]
				},
				"description": "This endpoint allows you to register a new user. When making a POST request to `{{base_url}}/register`, include a JSON payload in the request body with the `username` and `password` fields.\n\n### Request Body\n\n- `username` (string, required): The username of the new user.\n- `password` (string, required): The password for the new user.\n    \n\n### Response\n\n- Status: 201 - Created"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"auth_token\", jsonData.token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Quality\",\r\n    \"password\": \"secret\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This endpoint allows users to log in via a POST request. The request should include a JSON payload in the raw request body type with the \"username\" and \"password\" fields.\n\n### Request Body\n\n- `username` (string): The username of the user.\n- `password` (string): The password of the user.\n    \n\nUpon a successful request, the server responds with a status code of 200 and a JSON object containing a \"token\" as the authentication token.\n\n### Response\n\n- `token` (string): The authentication token for the logged-in user.\n    \n\n## Observation\n\nThe API token will automatically be set in the environment upon call, so there is no need to copy it manually. Just call this login route and any other endpoint that requires authentication will be available."
			},
			"response": []
		},
		{
			"name": "List Registered Users",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a list of users from the server. The response will include an array of user objects, where each user object contains the user's ID, username, creation date, enabled status, authorities, and account status.\n\nThe response will have a status code of 200 upon successful execution.\n\nExample response:\n\n``` json\n{\n    \"users\": [\n        {\n            \"id\": 0,\n            \"username\": \"\",\n            \"created\": \"\",\n            \"isEnabled\": true,\n            \"authorities\": [\n                {\n                    \"authority\": \"\"\n                }\n            ],\n            \"isAccountNonLocked\": true,\n            \"isCredentialsNonExpired\": true,\n            \"isAccountNonExpired\": true\n        }\n    ]\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Delete User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user?username=Quality2",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "username",
							"value": "Quality2"
						}
					]
				},
				"description": "This endpoint sends an HTTP DELETE request to delete a user with the specified username. The username is passed as a query parameter in the URL. The request does not have a request body.\n\nThe last execution of this request returned a status code of 204, indicating a successful deletion with no content in the response body."
			},
			"response": []
		},
		{
			"name": "Update User",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Quality_edited\",\r\n    \"password\": \"secret_edited\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/user?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This endpoint allows the user to update a specific user by their ID using an HTTP PUT request to the specified URL. The request should include the ID parameter in the query string and the user details in the request body.\n\n### Request Body\n\n- `username` (string): The username of the user.\n- `password` (string): The password of the user.\n    \n\n### Response\n\nUpon a successful execution, the server will respond with a status code of 200 and a JSON object containing the updated user details, including the user ID, username, creation date, account status, authorities, and account expiration information.\n\nExample response:\n\n``` json\n{\n    \"id\": 0,\n    \"username\": \"\",\n    \"created\": \"\",\n    \"isEnabled\": true,\n    \"authorities\": [\n        {\n            \"authority\": \"\"\n        }\n    ],\n    \"isAccountNonLocked\": true,\n    \"isCredentialsNonExpired\": true,\n    \"isAccountNonExpired\": true\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "List Registration Count By Date",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user-count",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user-count"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the count of user registrations. The request does not require any payload in the request body.\n\n### Response\n\n- Status: 200\n- The response body contains an array of objects with \"date\" and \"count\" properties, representing the date and the count of user registrations on that date."
			},
			"response": []
		}
	]
}